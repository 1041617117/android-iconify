{"name":"Iconify","tagline":"Android integration of multiple icon providers such as FontAwesome, Entypo, Typicons,...","body":"[![Alt](http://developer.android.com/images/brand/en_app_rgb_wo_45.png)](https://play.google.com/store/apps/details?id=com.joanzapata.android.icons.sample)\r\n\r\n**If you're tired of copying 5 images (ldpi, mdpi, hdpi, xhdpi, xxhdpi) for each icon you want to use in your app, for each color you want to use them with, and bang your head on the wall when you suddenly need to change their color or size, then I think ```Iconify``` can help you.**\r\n\r\n**Iconify** allows you to easily include vector icons in your `TextView`, `Button`, etcâ€¦\r\nThe icons are infinitely **scalable**, and **customizable** with shadows and everything you can do on texts.\r\n\r\nIt currently supports three icon font libraries out-of-the-box, and there are many more to come. In case you need a custom one, it allows you to add your own icons from icon font generation services like [fontello.com](http://fontello.com/), [icomoon.io](https://icomoon.io/) or [fontastic.me](http://fontastic.me/).\r\n\r\n-----\r\n\r\n### Install\r\n\r\nInclude the modules you need and declare them in your `Application`.\r\n\r\n```gradle\r\ndependencies {\r\n    compile 'com.joanzapata.android.iconify:android-iconify-fontawesome:2.0.0'\r\n    compile 'com.joanzapata.android.iconify:android-iconify-entypo:2.0.0'\r\n    compile 'com.joanzapata.android.iconify:android-iconify-typicons:2.0.0'\r\n}\r\n```\r\n\r\n```java\r\npublic class MyApplication extends Application {\r\n\r\n    @Override\r\n    public void onCreate() {\r\n        super.onCreate();\r\n        Iconify\r\n            .with(new FontAwesomeModule())\r\n            .with(new EntypoModule())\r\n            .with(new TypiconsModule());\r\n    }\r\n}\r\n```\r\n\r\n### Show icons in text widgets\r\n\r\nIf you need to put an icon on a ```TextView``` or a ```Button```, use the ```{ }``` syntax. The icons act exactly like the text, so you can apply shadow, size and color on them!\r\n\r\n```xml\r\n<IconTextView\r\n    android:text=\"I {fa-heart-o} to {fa-code} on {fa-android}\"\r\n    android:shadowColor=\"#22000000\"\r\n    android:shadowDx=\"3\"\r\n    android:shadowDy=\"3\"\r\n    android:shadowRadius=\"1\"\r\n    android:textSize=\"40sp\"\r\n    android:textColor=\"#FF...\"\r\n    ... />\r\n```\r\n\r\n![Alt](https://raw.githubusercontent.com/JoanZapata/android-iconify/master/graphics/androids.png)\r\n\r\n> You can either use ```IconTextView``` / ```IconButton``` or use any ```TextView``` and then programmatically call ```Iconify.addIcons(myTextView)```.\r\n\r\n### Show an icon where you need a `Drawable`\r\n\r\nIf you need an icon in an ```ImageView``` or in your ```ActionBar``` menu item, then you should use ```IconDrawable```. Again, icons are infinitely scalable and will never get fuzzy!\r\n\r\n```java\r\n// Set an icon in the ActionBar\r\nmenu.findItem(R.id.share).setIcon(\r\n   new IconDrawable(this, FontAwesomeIcons.fa_share)\r\n   .colorRes(R.color.ab_icon)\r\n   .actionBarSize());\r\n```\r\n\r\n-----\r\n\r\n## Proguard\r\n\r\nIf you use Proguard, don't forget to add the following rule.\r\n\r\n```\r\n-keep class com.joanzapata.** { *; }\r\n```\r\n\r\n## Contributions\r\n\r\n* Joan Zapata [@JoanZapata](https://github.com/JoanZapata)\r\n* Damien Villeneuve [@DayS](https://github.com/DayS)\r\n* Mike Penz [@mikepenz](https://github.com/mikepenz)\r\n\r\n## License\r\n\r\n```\r\nCopyright 2015 Joan Zapata\r\n\r\nLicensed under the Apache License, Version 2.0 (the \"License\");\r\nyou may not use this file except in compliance with the License.\r\nYou may obtain a copy of the License at\r\n\r\n    http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nUnless required by applicable law or agreed to in writing, software\r\ndistributed under the License is distributed on an \"AS IS\" BASIS,\r\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\nSee the License for the specific language governing permissions and\r\nlimitations under the License.\r\n\r\nIt uses FontAwesome font by Dave Gandy, licensed under OFL 1.1, which is compatible\r\nwith this library's license.\r\n\r\n    http://scripts.sil.org/cms/scripts/render_download.php?format=file&media_id=OFL_plaintext&filename=OFL.txt\r\n    \r\n```","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}